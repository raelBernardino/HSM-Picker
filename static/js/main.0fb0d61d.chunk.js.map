{"version":3,"sources":["components/SongIcon.js","components/Completed.js","App.js","serviceWorker.js","index.js"],"names":["SongIcon","_this$props","this","props","song1","song2","addPoint","react_default","a","createElement","className","onClick","e","id","title","Component","Completed","songArray","map","song","i","key","concat","points","uuidv1","require","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentIndex","indexCounter","finishCounter","completed","_displaySongs","bind","assertThisInitialized","_addPoint","_completed","length","setState","prevState","objectSpread","winId","loseId","updatedPoints","_rankSongs","sort","b","console","log","components_Completed","components_SongIcon","displaySongs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fb0d61d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass SongIcon extends Component {\r\n  render() {\r\n    const {\r\n      song1,\r\n      song2,\r\n      addPoint\r\n    } = this.props\r\n    return (\r\n      <div className=\"song-icon_container\">\r\n        <div className=\"song-icon_icon\">\r\n          <div className=\"song-icon_icon-header\" onClick={(e) => addPoint(song1.id, song2.id)}>\r\n            <span>{song1.title}</span>\r\n          </div>\r\n          <div className=\"song-icon_icon-header\" onClick={(e) => addPoint(song2.id, song1.id)}>\r\n            <span>{song2.title}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SongIcon","import React, { Component } from 'react'\r\n\r\nclass Completed extends Component {\r\n  render() {\r\n    const {\r\n      songArray\r\n    } = this.props\r\n    return (\r\n      <div className=\"completed\">\r\n        <div className=\"completed_song-container\">\r\n          <div className=\"completed_song-icon\">\r\n            {\r\n              songArray.map((song, i) => (\r\n                <div className=\"completed_song-ranked\" key={song.id}>\r\n                  <span className=\"completed_song-ranked_title\">{i + 1}</span>\r\n                  <span className=\"completed_song-ranked_title\">{`${song.title}: `}</span>\r\n                  <span className=\"completed_song-ranked_title\">{song.points}</span>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Completed","import React, { Component } from 'react'\nimport './App.scss'\nimport SongIcon from './components/SongIcon'\nimport Completed from './components/Completed'\nconst uuidv1 = require('uuid/v1')\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      songArray: [\n        {\n          title: 'Start of Something New',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'Get\\'cha Head In the Game',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'What I\\'ve Been Looking For',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'Stick to the Status Quo',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'When There Was Me and You',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'We\\'re Breaking Free',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'We\\'re All In this Together',\n          points: 0,\n          id: uuidv1()\n        },        {\n          title: 'What Time Is It',\n          points: 0,\n          id: uuidv1()\n        },        {\n          title: 'Fabulous',\n          points: 0,\n          id: uuidv1()\n        },        {\n          title: 'Work It Out',\n          points: 0,\n          id: uuidv1()\n        },        {\n          title: 'You Are the Music in Me',\n          points: 0,\n          id: uuidv1()\n        },        {\n          title: 'Now or Never',\n          points: 0,\n          id: uuidv1()\n        },        {\n          title: 'Right Here Right Now',\n          points: 0,\n          id: uuidv1()\n        },        {\n          title: 'I Want It All',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'Can I Have this Dance',\n          points: 4,\n          id: uuidv1()\n        },\n        {\n          title: 'A Night to Remember',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'I Just Wanna Be With You',\n          points: 0,\n          id: uuidv1()\n        },\n        {\n          title: 'The Boys are Back',\n          points: 0,\n          id: uuidv1()\n        }\n      ],\n      song1: {\n        title: '',\n        points: 0,\n      },\n      song2: {\n        title: '',\n        points: 0\n      },\n      currentIndex: 0,\n      indexCounter: 0,\n      finishCounter: 0,\n      completed: false\n    }\n    this._displaySongs = this._displaySongs.bind(this)\n    this._addPoint = this._addPoint.bind(this)\n    this._completed = this._completed.bind(this)\n    // this._rankSongs = this._rankSongs.bind(this)\n  }\n\n  componentDidMount() {\n    this._displaySongs()\n  }\n\n  _displaySongs() {\n    const songArray = this.state.songArray\n    let currentIndex = this.state.currentIndex\n    let indexCounter = this.state.indexCounter + 1\n    let finishCounter = this.state.finishCounter\n    let completed = this.state.completed\n    if (completed === false) {\n      if (indexCounter === songArray.length) {\n        currentIndex = currentIndex + 1\n        indexCounter = currentIndex + 1\n        finishCounter++\n      }\n      this.setState(prevState => ({\n        song1: {\n          ...prevState.song1,\n          title: songArray[currentIndex].title,\n          id: songArray[currentIndex].id\n        },\n        song2: {\n          ...prevState.song2,\n          title: songArray[indexCounter].title,\n          id: songArray[indexCounter].id\n        },\n        indexCounter,\n        currentIndex,\n        finishCounter,\n        completed\n      }))\n    }\n  }\n\n  _addPoint(winId, loseId) {\n    const songArray = this.state.songArray\n      .map(song => {\n        let updatedPoints = song.points\n        if (song.id === winId) {\n          updatedPoints++\n        } else if (song.id === loseId) {\n          updatedPoints--\n        }\n        return {\n          ...song,\n          points: updatedPoints\n        }\n      })\n    this.setState({ songArray })\n    this._completed()\n  }\n\n  _completed() {\n    const finishCounter = this.state.finishCounter\n    const songArray = this.state.songArray\n    let completed = this.state.completed\n    if (finishCounter === songArray.length - 2) {\n      completed = !completed\n      this.setState({ completed })\n      this._rankSongs()\n    } else {\n      this._displaySongs()\n    }\n  }\n\n  _rankSongs() {\n    let songArray = this.state.songArray\n    songArray.sort((a, b) => {\n      if (a.points > b.points) {\n        return -1\n      }\n    })\n    this.setState({ songArray })\n    console.log(songArray)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main-header\">\n          <span>High School Musical Song Ranker</span>\n        </div>\n        {this.state.completed ?\n          <Completed\n            songArray={this.state.songArray}\n          />\n          :\n          <SongIcon\n            song1={this.state.song1}\n            song2={this.state.song2}\n            songArray={this.state.songArray}\n            displaySongs={this._displaySongs}\n            addPoint={this._addPoint}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}